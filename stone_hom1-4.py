import math
from random import randint as RI
from random import uniform as UF


# 1. Напишите программу, которая
# 1.принимает на вход цифру, обозначающую день недели
# 2. и проверяет, является ли этот день выходным.

# def input_int():
#     while True:
#         try:
#             number = int(input('Введите целое число: '))
#             return number
#         except:
#             print('ОШИБКА! Введите ЦЕЛОЕ число: ')


# day = input_int()

# if 0 < day < 8:
#     if day < 6:
#         print('Будни')
#     else:
#         print('Выходные')
# else:
#     print('Сорян, но ты чё-то не то ввел')

# ===================================================

# 2. Напишите программу для. проверки истинности утверждения ¬(X ⋁ Y ⋁ Z) = ¬X ⋀ ¬Y ⋀ ¬Z для всех значений предикат.

# Конъюнкция = AND = И = Λ  = &
# Дизъюнкция = OR = ИЛИ = V  = |
# Сложение по модулю 2 = XOR = ИСКЛЮЧАЮЩЕЕ ИЛИ = ⊕  = ~
# Отрицание = NOT = НЕ = ¬  =  !

# flag = True

# for x in [True, False]:
#     for y in [True, False]:
#         for z in [True, False]:
#             expression = not (x or y or z) == (not x and not y and not z)
#             print(f'{x=} {y=} {z=} -> {expression}')
#             if not expression:
#                 flag = False

# if flag:
#     print('Выражение всегда верно')
# else:
#     print('Выражение не всегда верно')

# ===================================================

# 3.# Напишите программу, которая принимает
# 1. на вход координаты точки (X и Y), причём X ≠ 0 и Y ≠ 0
# 2.и выдаёт номер четверти плоскости, в которой находится эта точка (или на какой оси она находится).

# Пример:

# - x=34; y=-30 -> 4
# - x=2; y=4-> 1
# - x=-34; y=-30 -> 3

# def input_float():
#     while True:
#         try:
#             coords = input('Введите координаты через пробел: ')
#             coords = list(map(float, coords.split()))
#             if len(coords) == 2:
#                 return coords
#             else:
#                 print('Введите только две координаты')
#         except:
#             print('ОШИБКА! Введите ВЕЩЕСТВЕННОЕ число: ')


# x, y = input_float()

# if x > 0 and y > 0:
#     print('Это 1 четверть')
# elif x < 0 and y > 0:
#     print('Это 2 четверть')
# elif x < 0 and y < 0:
#     print('Это 3 четверть')
# elif x > 0 and y < 0:
#     print('Это 4 четверть')
# else:
#     print('Одна из точек лежит на оси')
# ====================================================

# 4 Напишите программу, которая
# по заданному номеру четверти, показывает диапазон возможных координат точек в этой четверти (x и y).

# def input_int():
#     while True:
#         try:
#             number = int(input('Введите номер четверти: '))
#             if 0 < number < 5:
#                 return number
#             else:
#                 print('Такой четверти нет, попробуй еще раз')
#         except:
#             print('ОШИБКА! Введите ЦЕЛОЕ число: ')


# match input_int():
#     case 1:
#         print('1 четверть: X > 0, Y > 0')
#     case 2:
#         print('2 четверть: X < 0, Y > 0')
#     case 3:
#         print('3 четверть: X < 0, Y < 0')
#     case 4:
#         print('4 четверть: X > 0, Y < 0')
#     case _:
#          print('Такой четверти не существует')

# =============================================

# 5 Напишите программу, которая принимает на вход координаты двух точек
#  и находит расстояние между ними в 2D пространстве.

# *Пример:*

# - A (3,6); B (2,1) -> 5,09
# - A (7,-5); B (1,-1) -> 7,21

# формула AB = √(xb - xa)^2 + (yb - ya)^2

# def input_coords():
#     try:
#         coords = input('Введите координаты точек А (x y), B(x y)через пробел и запятую: ')
#         coords = coords.split(',')
#         new_coords =[]
#         for i in coords:
#             new_coords.append(tuple(map(float, i.split())))
#         return new_coords
#     except:
#         print('Введите по шаблону А(x y), B(x y)')

# a, b = input_coords()

# distance = (b[0] - a[0])**2 +(b[1] - a[1])**2
# print(f'Расстояние между точками {a=} и {b=} будет {round(math.sqrt(distance),2)}')
# =========================================================

# 2.1 Напишите программу, которая принимает на вход вещественное число и показывает сумму его цифр.

# Пример:

# - 6782 -> 23
# - 0,56 -> 11

# number = input('Введите вещественное число: ')

# summa = 0

# вариант 1
# number = number.split('.')
# for element in number:
#     for dig in element:
#         summa += int(dig)

# print(summa)

# либо луший вариант:


# for element in number:
#     if element.isdigit():
#         summa += int(element)

# print(summa)
# =====================================================

# 2.3 Задайте список из n чисел последовательности
#  $(1+\frac 1 n)^n$ и выведите на экран их сумму.

# *Пример:*

# - Для n = 6: {1: 4, 2: 7, 3: 10, 4: 13, 5: 16, 6: 19}

# n = int (input('Введите целое число: '))

# my_list = []
# for i in range(1, n+1):
#     my_list.append(round((1+1/i)**i, 2))
# print(f'При n = {n} список будет {my_list}')
# print(f'а его сумма {sum(my_list)}')
# ===============================================

# 2.5 Реализуйте алгоритм перемешивания списка.

# my_list = [i for i in range(10)]


# def my_shuffle(new_list: list):
#     for i in range(len(new_list)):
#         ni = RI(0, len(new_list)-1)
#         # new_list.append(new_list.pop(ni))
#         # другой вариант:
#         new_list[i], new_list[ni] = new_list[ni], new_list[i]

# print(my_list)
# my_shuffle(my_list)
# print(my_list)
# ===========================================================

# 3.1. Задайте список из нескольких чисел.
# Напишите программу, которая найдёт сумму элементов списка, стоящих на нечётной позиции.

# Пример:

# - [2, 3, 5, 9, 3] -> на нечётных позициях элементы 3 и 9, ответ: 12

# my_list = [RI(1, 10) for i in range(10)]
# sum = 0

# # for i in range(len(my_list)):
# #     if i % 2 != 0:
# #         sum += my_list[i]
# # вариант лучше(сразу по нечетным):
# for i in range(1, len(my_list),2):
#     sum += my_list[i]

# print(my_list)
# print(sum)
# =========================================================

# 3.2 Напишите программу, которая найдёт произведение пар чисел списка.
#  Парой считаем первый и последний элемент, второй и предпоследний и т.д.

# *Пример:*

# - [2, 3, 4, 5, 6] => [12, 15, 16];
# - [2, 3, 5, 6] => [12, 15]

# my_list = [RI(1, 10) for i in range(9)]

# new_list = []
# for i in range(len(my_list)//2):
#     new_list.append(my_list[i]*my_list[-i -1])

# if len(my_list) % 2 !=0:
#     new_list.append(my_list[len(my_list)//2]**2)
# print(my_list)
# print(new_list)
# ====================================================

# 3.3 Задайте список из вещественных чисел.
#  Напишите программу, которая найдёт разницу между максимальным и минимальным значением дробной части элементов.

# *Пример:*

# - [1.1, 1.2, 3.1, 5, 10.01] => 0.19

# my_list = [round(UF(0, 100), RI(0, 3)) for _ in range(10)]

# for _ in range(len(my_list)):
##     item = my_list.pop(0)
##     my_list.append(item if item != int(item) else int(item))

# print(my_list)
# new_list = []
# for item in my_list:
#     if item != int(item):
#         new_list.append(round(item%1, 3))

# print(new_list)
# print(f'Разница между максимальной ({max(new_list)}) и минимальной({min(new_list)})'
# f' дробными частями будет {max(new_list) - min(new_list)}')
# ======================================================================

# 3.4 Напишите программу, которая будет преобразовывать десятичное число в двоичное.

# *Пример:*

# - 45 -> 101101
# - 3 -> 11
# - 2 -> 10

# number = int(input('Введите целое число: '))

# bi_num = ''
# while number > 0:
#     bi_num = str(number % 2) + bi_num
#     number //= 2
# print(bi_num)
# ======================================================

# 3.5 Задайте число. Составьте список чисел Фибоначчи,
#  в том числе для отрицательных индексов.

# *Пример:*

# - для k = 8 список будет выглядеть так: [-21 ,13, -8, 5, −3, 2, −1, 1, 0, 1, 1, 2, 3, 5, 8, 13, 21]
#  [Негафибоначчи]

fibo = [1, 0, 1]

for i in range(int(input('Введите предел последовательности: '))):
    fibo.insert(0, fibo[1] - fibo[0])
    fibo.append(fibo[-2] + fibo[-1])
print(fibo)

# ===================================================

# Написать программу, которая состоит 4 из этапов:
# - создает список из рандомных четырех значных чисел
# - принимает с консоли цифру и удаляет ее из всех элементов списка
# - цифры каждого элемента суммирует пока результат не станет однозначным числом
# - из финального списка убирает все дублирующие элементы
# - после каждого этапа выводит результат в консоль

# Пример:
# -1 этап: [2634, 6934, 7286, 3353, 4602, 3176, 3796]
# -2 этап 
