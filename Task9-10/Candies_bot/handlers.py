from aiogram.types import Message
from aiogram.dispatcher.filters import Text
from config import dp
import text
import game
import random
from keyboard import kb_new, kb_stop


@dp.message_handler(commands=['start'])
async def on_start(message: Message):
    await message.answer(text= f'{message.from_user.first_name}'
                               f'{text.greeting}', reply_markup = kb_new)

@dp.message_handler(commands= ['new_game'])
async def start_new_game(message: Message):
    if game.check_game():
        game.set_total_to_max()
    else:
        game.new_game()
    if game.check_game():
        toss = random.choice([True, False])
        if toss:
            await player_turn(message)
        else:
            await bot_turn(message)


@dp.message_handler(commands=['stop_game'])
async def stop_game(message):
    game.new_game()
    await message.reply('–ò–ì–†–ê –û–ö–û–ù–ß–ï–ù–ê!', reply_markup=kb_new)

@dp.message_handler(commands=['set_total'])
async def set_total_candies(message:Message):
    if not game.check_game():
        max_total = message.text.split()
        if len(max_total) > 1 and max_total[1].isdigit():
            game.set_max_total(int(max_total[1]))
            await message.reply(text=f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {max_total[1]}')
        else:
            await message.reply(text='–≠—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –ú–ê–• –∫–æ–ª-–≤–æ –∫–æ–Ω—Ñ–µ—Ç. '
                            ' –í–≤–µ–¥–∏—Ç–µ /set_total –∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ')
    else:
        await message.reply(text='–ù–∞—Å—Ç—Ä–æ–π–∫—É –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–∞—Ä—Ç–∏–∏')


@dp.message_handler(commands=['level'])
async def set_bot_vevel(message:Message):
    if not game.check_game():
        game.change_level()
        await message.reply(text=f'–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {game.get_bot_level()}')
    else:
        await message.reply(text='–ù–∞—Å—Ç—Ä–æ–π–∫—É –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–∞—Ä—Ç–∏–∏')

async def player_turn(message: Message):
    await message.answer(f'{message.from_user.first_name},'
                         f'—Ç–≤–æ–π —Ö–æ–¥! üç¨üç≠üç¨ –°–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–µ—Ç–æ–∫ –≤–æ–∑—å–º–µ—à—å?', reply_markup=kb_stop)



@dp.message_handler()
async def take(message: Message):
    name = message.from_user.first_name
    if game.check_game():
        if message.text.isdigit():
            take = int(message.text)
            if (0 < take < 29) and take <= game.get_total():
                game.take_candies(take)
                if await check_win(message, take, 'player'):
                    return
                await message.answer(f'–ò–≥—Ä–æ–∫ {name} –≤–∑—è–ª üç≠{take} —à—Ç. –∏ –Ω–∞ —Å—Ç–æ–ª–µ –æ—Å—Ç–∞–ª–æ—Å—å'
                                f' {game.get_total()}. –•–æ–¥–∏—Ç –ë–æ—Ç...')
                await bot_turn(message)
            
            else:
                await message.answer('–£–ø—Å! –ú–æ–∂–Ω–æ –≤–∑—è—Ç—å –Ω–µ –±–æ–ª—å—à–µ 28 –∏ –Ω–µ –º–µ–Ω—å—à–µ 1 –∫–æ–Ω—Ñ–µ—Ç–∫–∏!')
        else:
            pass

async def bot_turn(message):
    total = game.get_total()
    take = 0
    if game.get_bot_level()=='Light':
        if total <= 28:
            take = total
        else:
            take = random.randint(1,28)
    else:
        if total <= 28:
            take = total
        else:
            var = (game.get_total() -29)%28
            take = var if var > 0 else random.randint(1,28)
    game.take_candies(take)
    await message.answer(f'–ë–æ—Ç –≤–∑—è–ª üç¨{take} —à—Ç. –∏ –∫–æ–Ω—Ñ–µ—Ç –æ—Å—Ç–∞–ª–æ—Å—å {game.get_total()}', reply_markup=kb_stop)
    if await check_win(message, take, '–ë–æ—Ç'):
        return
    await player_turn(message)
 
async def check_win(message, take: int, player: str):
    if game.get_total()<= 0:
        if player == 'player':
            await message.answer(f'–ò–≥—Ä–æ–∫ {message.from_user.first_name} –≤–∑—è–ª üç¨{take} —à—Ç. –∏ ' 
                                 f'–æ–¥–µ—Ä–∂–∞–ª –ø–æ–±–µ–¥—É –Ω–∞–¥ –∂–µ–ª–µ–∑—è–∫–æ–π!‚úåüèÜüò∏')
                             
        else: 
            await message.answer(f'{message.from_user.first_name}, –Ω—É —Ç—ã –∏ —Ç—É–ø–∏—Ü–∞!üòÇ –í–∫–ª—é—á–∞–π –º–æ–∑–≥–∏!ü§Ø '
                              f' –ö–æ–Ω—Ñ–µ—Ç–æ–∫ –±–æ–ª—å—à–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å! –ë–û–¢ –∑–∞–±—Ä–∞–ª –ø–æ—Å–ª–µ–¥–Ω–∏–µ üç¨({take} —à—Ç.) –∏ –æ–¥–µ—Ä–∂–∞–ª –ø–æ–±–µ–¥—É!')
        game.new_game()
        return True
    else:
        return False

